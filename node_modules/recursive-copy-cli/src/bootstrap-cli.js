"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.bootstrapCli = void 0;
var process_1 = __importDefault(require("process"));
var console_1 = __importDefault(require("console"));
var recursive_copy_1 = __importDefault(require("recursive-copy"));
var setup_1 = require("./yargs/setup");
function bootstrapCli(cliArgs) {
    return __awaiter(this, void 0, void 0, function () {
        // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
        function onCopyItemEvent(copyOperation) {
            // eslint-disable-next-line no-console
            console_1["default"].log(copyOperation.src + " -> " + copyOperation.dest);
        }
        var argv, cliOptionsKeysToCopy, options;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // eslint-disable-next-line @typescript-eslint/no-magic-numbers
                    cliArgs = cliArgs !== null && cliArgs !== void 0 ? cliArgs : process_1["default"].argv.slice(2);
                    return [4 /*yield*/, setup_1.getYargsInstance().parseAsync(cliArgs)];
                case 1:
                    argv = (_a.sent());
                    cliOptionsKeysToCopy = ['overwrite', 'expand', 'dot', 'junk', 'filter', 'rename', 'transform', 'debug'];
                    options = cliOptionsKeysToCopy.reduce(
                    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
                    function (prev, key) {
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access
                        var value = argv[key];
                        if (value != undefined) {
                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                            prev[key] = value;
                        }
                        return prev;
                    }, {});
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
                    return [4 /*yield*/, recursive_copy_1["default"](argv.src, argv.dest, options)
                            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                            .on(recursive_copy_1["default"].events.COPY_FILE_COMPLETE, onCopyItemEvent)
                            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                            .on(recursive_copy_1["default"].events.CREATE_SYMLINK_COMPLETE, onCopyItemEvent)
                            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                            .on(recursive_copy_1["default"].events.CREATE_DIRECTORY_COMPLETE, onCopyItemEvent)
                            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/prefer-readonly-parameter-types
                            .on(recursive_copy_1["default"].events.ERROR, function (error, copyOperation) {
                            // eslint-disable-next-line no-console, @typescript-eslint/restrict-template-expressions, @typescript-eslint/no-base-to-string
                            console_1["default"].error("Unable to copy " + copyOperation.src + " -> " + copyOperation.dest + ". ERR: " + error);
                            process_1["default"].exitCode = 1;
                        })
                            // eslint-disable-next-line promise/always-return, @typescript-eslint/prefer-readonly-parameter-types
                            .then(function (results) {
                            // eslint-disable-next-line no-console
                            console_1["default"].log(results.length + " item(s) copied");
                        })["catch"](function (error) {
                            // eslint-disable-next-line no-console, @typescript-eslint/restrict-template-expressions
                            console_1["default"].error("Copy failed! ERR: " + error);
                        })];
                case 2:
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.bootstrapCli = bootstrapCli;
